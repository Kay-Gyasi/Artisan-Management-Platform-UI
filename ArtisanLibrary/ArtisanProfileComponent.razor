@page "/account/artisan/overview"
@inject NavigationService Navigator
@implements IDisposable
@inject IActionDispatcher ActionDispatcher
@inject ArtisanStore ArtisanStore
@inject ArtisanService ArtisanService
@inject AuthService AuthStateService
@layout ArtisanProfileLayout
@inject IJSRuntime JsInterop

<PageTitle>Profile Overview</PageTitle>

<!--begin::details View-->
<div class="card mb-5 mb-xl-10" id="kt_profile_details_view">
	<!--begin::Card header-->
	<div class="card-header cursor-pointer" tabindex="0" @ref="_profBody">
		<!--begin::Card title-->
		<div class="card-title m-0">
			<h3 class="fw-bolder m-0">Profile Details</h3>
		</div>
		<!--end::Card title-->
		<!--begin::Action-->
		<a @onclick="Navigator.NavigateToArtisanProfileSettings" class="btn btn-primary align-self-center">Edit Profile</a>
		<!--end::Action-->
	</div>
	<!--begin::Card header-->
	<!--begin::Card body-->
	<div class="card-body p-9">
		<!--begin::Row-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Full Name</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800">@UserName</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Row-->
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Company</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@BusinessName</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Type of Business</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@BusinessType</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Contact Phone
			<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Phone number must be active"></i></label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 d-flex align-items-center">
				<span class="fw-bolder fs-6 text-gray-800 me-2"><a href="tel:@Artisan?.User?.Contact?.PrimaryContact">
				@Artisan?.User?.Contact?.PrimaryContact</a></span>
				<span class="badge badge-success" disabled="@Artisan?.IsVerified">Verified</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Country
			<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Country of origination"></i></label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800">@Country</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Email</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800"><a href="mailto:@EmailAddress">@EmailAddress</a></span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Notice-->
		<div class="notice d-flex bg-light-warning rounded border-warning border border-dashed p-6">
			<!--begin::Icon-->
			<!--begin::Svg Icon | path: icons/duotune/general/gen044.svg-->
			<span class="svg-icon svg-icon-2tx svg-icon-warning me-4">
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
					<rect opacity="0.3" x="2" y="2" width="20" height="20" rx="10" fill="black" />
					<rect x="11" y="14" width="7" height="2" rx="1" transform="rotate(-90 11 14)" fill="black" />
					<rect x="11" y="17" width="2" height="2" rx="1" transform="rotate(-90 11 17)" fill="black" />
				</svg>
			</span>
			<!--end::Svg Icon-->
			<!--end::Icon-->
			<!--begin::Wrapper-->
			<div class="d-flex flex-stack flex-grow-1">
				<!--begin::Content-->
				<div class="fw-bold">
					<h4 class="text-gray-900 fw-bolder">We need your attention!</h4>
					<div class="fs-6 text-gray-700">Your payment was declined. To start using tools, please
					<a class="fw-bolder" href="../../demo8/dist/account/billing.html">Add Payment Method</a>.</div>
				</div>
				<!--end::Content-->
			</div>
			<!--end::Wrapper-->
		</div>
		<!--end::Notice-->
	</div>
	<!--end::Card body-->
</div>
<!--end::details View-->

@code {
	ElementReference _profBody;
	ArtisanDto? Artisan { get; set; } = new();
	string EmailAddress { get; set; }
	string BusinessName { get; set; }
	string BusinessType { get; set; }
	string UserName { get; set; }
	string StreetAddress { get; set; }
	string Phone { get; set; }
	string Country { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		Artisan = ArtisanStore.GetState().Artisan;
		await InitializeProperties();
		ArtisanStore.AddStateChangeListener(UpdateView);
		await JsInterop.InvokeVoidAsync("SetFocusToElement", _profBody);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await GetArtisan();
			Artisan = ArtisanStore.GetState().Artisan;
			await InitializeProperties();
			StateHasChanged();
		}
	}

	async Task InitializeProperties()
	{
		var user = await AuthStateService.GetClaim("unique_name");
		Artisan ??= new();
		Artisan.User ??= new();
		Artisan.User.Address ??= new();
		Artisan.User.Contact ??= new();
		EmailAddress = Artisan?.User?.Contact?.EmailAddress;
		BusinessName = Artisan?.BusinessName ?? user;
		BusinessType = Artisan?.Type.ToString();
		UserName = user;
		StreetAddress = Artisan?.User?.Address?.StreetAddress;
		Country = "Ghana";
		Phone = Artisan?.User?.Contact?.PrimaryContact;
	}

	private async Task GetArtisan()
	{
		await ActionDispatcher.Dispatch(new GetByUserIdAction());
	}

	private void UpdateView()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		ArtisanStore.RemoveStateChangeListener(UpdateView);
	}
}
