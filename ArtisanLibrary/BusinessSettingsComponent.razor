@page "/account/artisan/business"
@using AMP.Web.Models.ViewModels
@layout ArtisanProfileLayout
@inject ArtisanService ArtisanService
@inject NotificationService ToastService
@inject AuthService AuthStateService
@inject LookupService LookupService
@inject UserService UserService
@inject IMapper Mapper
@implements IDisposable
@inject IActionDispatcher ActionDispatcher
@inject ArtisanStore ArtisanStore

<PageTitle>Business Settings</PageTitle>

@*<ArtisanProfileLayout></ArtisanProfileLayout>
*@<!--begin::Basic info-->
<div class="card mb-5 mb-xl-10">
	<!--begin::Card header-->
	<div class="card-header border-0 cursor-pointer" role="button" data-bs-toggle="collapse" 
	     data-bs-target="#kt_account_profile_details" aria-expanded="true" aria-controls="kt_account_profile_details"
	     tabindex="0" @ref="_busiBody">
		<!--begin::Card title-->
		<div class="card-title m-0">
			<h3 class="fw-bolder m-0">Business Details</h3>
		</div>
		<!--end::Card title-->
	</div>
	<!--begin::Card header-->
	<!--begin::Content-->
	<div id="kt_account_profile_details" class="collapse show">
		<!--begin::Form-->
		<EditForm Model="Artisan" id="kt_account_profile_details_form" class="form" OnValidSubmit="Submit">
			<DataAnnotationsValidator />
			<!--begin::Card body-->
			<div class="card-body border-top p-9">

				<!--begin::Input group-->
				<div class="row mb-6">
					<!--begin::Label-->
					<label class="col-lg-4 col-form-label required fw-bold fs-6">Name</label>
					<!--end::Label-->
					<!--begin::Col-->
					<div class="col-lg-8 fv-row">
						<InputText @bind-Value="Artisan.BusinessName" type="text" name="company" class="form-control form-control-lg form-control-solid" placeholder="Company name" />
					</div>
					<!--end::Col-->
				</div>
				<!--end::Input group-->
				
				<!--begin::Input group-->
                	<div class="row mb-6">
                		<!--begin::Label-->
                		<label class="col-lg-4 col-form-label required fw-bold fs-6">Type</label>
                		<!--end::Label-->
                		<!--begin::Col-->
                		<div class="col-lg-8 fv-row">
                			<!--begin::Input-->
                			<select @bind="Artisan.Type" name="type" aria-label="Select a type of business" data-control="select2" data-placeholder="Select a business type..." class="form-select form-select-solid form-select-lg">
                				<option value="">Select a Business Type...</option>
                				@foreach (var type in Enum.GetValues(typeof(BusinessType)))
                				{
                					<option value="@type.ToString()">@type</option>
                				}
                			</select>
                			<!--end::Input-->
                        </div>
                		<!--end::Col-->
                	</div>
                <!--end::Input group-->

				<!--begin::Input group-->
				<div class="row mb-6">
					<!--begin::Label-->
					<label class="col-lg-4 col-form-label fw-bold fs-6">Services</label>
					<!--end::Label-->
					<!--begin::Col-->
					<div class="col-lg-8 fv-row">
						<select @onchange="SelectedServicesChanged" multiple name="services" aria-label="Select a service" 
									 data-control="select2" data-placeholder="Select a service.." 
									 class="form-select form-select-solid form-select-lg">
							<option value="">Select a service..</option>
							@foreach (var service in Services)
							{
								<option value="@service.Name">@service.Name</option>
							}
						</select>
					</div>
					<!--end::Col-->
				</div>
				<!--end::Input group-->

				<p>
					Selected Services: @string.Join(", ", Servs)
				</p>

				<!--begin::Input group-->
				<div class="row mb-6">
					<!--begin::Label-->
					<label class="col-lg-4 col-form-label fw-bold fs-6">
						<span>Description</span>
						<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Description of business"></i>
					</label>
					<!--end::Label-->
					<!--begin::Col-->
					<div class="col-lg-8 fv-row">
						<InputTextArea style="min-height: 25vh" @bind-Value="Artisan.Description" name="description" class="form-control form-control-lg form-control-solid" placeholder="Description" />
					</div>
					<!--end::Col-->
				</div>
				<!--end::Input group-->
				@if (Servs.Any(x => x == "Electrical Works"))
				{
					<!--begin::Input group-->
					<div class="row mb-6">
						<!--begin::Label-->
						<label class="col-lg-4 col-form-label fw-bold fs-6" title="Energy Commission Certificate Number">ECCN</label>
						<!--end::Label-->
						<!--begin::Col-->
						<div class="col-lg-8 fv-row">
							<InputText @bind-Value="Artisan.ECCN" type="text" name="eccn" class="form-control form-control-lg form-control-solid" placeholder="Energy Commission Certificate Number" />
						</div>
						<!--end::Col-->
					</div>
					<!--end::Input group-->
				}
			</div>
			<!--end::Card body-->
			<!--begin::Actions-->
			<div class="card-footer d-flex justify-content-end py-6 px-9">
				<button type="reset" class="btn btn-light btn-active-light-primary me-2">Discard</button>
				<button type="submit" class="btn btn-primary" id="kt_account_profile_details_submit"
						disabled="@IsLoading">Save Changes</button>
			</div>
			<!--end::Actions-->
		</EditForm>
		<!--end::Form-->
	</div>
	<!--end::Content-->
</div>
<!--end::Basic info-->

@code {
	ElementReference _busiBody;
	ArtisanCommand? Artisan { get; set; } = new();
	UserCommand? User { get; set; } = new();
	List<Lookup> Services { get; set; } = new();
	string? BusinessName { get; set; }
	string? Description { get; set; }
	string[] ArtisanServices { get; set; } = new string[] {}; 
	List<string> Servs { get; set; } = new List<string>();	
	bool IsLoading { get; set; }
	
	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		InitializeProperties();
		ArtisanStore.AddStateChangeListener(UpdateView);
		await _busiBody.FocusAsync();
	}

	// TODO:: refactor this (readability)
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await SetArtisanInfo();
			await GetServices();
			
			if (Artisan?.Services is not null)
			{
				foreach (var lang in Artisan.Services)
				{
					Servs.Add(lang.Name);
				}
			}

			InitializeProperties();
			UpdateView();
		}
	}

	async Task SetArtisanInfo()
	{
		await GetArtisan();
		var artisan = ArtisanStore.GetState().Artisan;
		Artisan = Mapper.Map<ArtisanCommand>(artisan);
		User = Mapper.Map<UserCommand>(artisan.User);
	}

	async Task GetServices() => Services = await LookupService.Get(LookupType.Service);

	void InitializeProperties()
	{
		BusinessName = Artisan?.BusinessName ?? "";
		Description = Artisan?.Description ?? "";
	}

	void SelectedServicesChanged(ChangeEventArgs e)
	{
		if (e.Value is null) return;
		ArtisanServices = (string[])e.Value;
		Servs.Clear();
		foreach (var lang in ArtisanServices)
		{
			Servs.Add(lang);
		}
	}

	async Task Submit()
	{
		IsLoading = true;
		StateHasChanged();
		var servs = from c in Servs
					select new ServiceCommand()
			{
				Name = c
			};
		Artisan?.Services.Clear();
		Artisan?.Services.AddRange(servs);
		var response = await ArtisanService.Save(Artisan);
		IsLoading = false;
		StateHasChanged();
		if (response.IsComplete)
		{
			await ResetArtisan();
			ToastService.SaveSuccess();
			await GetArtisan();
			var artisan = ArtisanStore.GetState().Artisan;
			Services = await LookupService.Get(LookupType.Service);
			Artisan = Mapper.Map<ArtisanCommand>(artisan);
			User = Mapper.Map<UserCommand>(artisan.User);
			UpdateView(); 
			return;
		}
		ToastService.SaveFailure();
	}

	private async Task GetArtisan() => await ActionDispatcher.Dispatch(new GetByUserIdAction());

	private async Task ResetArtisan() => await ActionDispatcher.Dispatch(new ResetArtisanAction());

	private void UpdateView() => StateHasChanged();

	public void Dispose() => ArtisanStore.RemoveStateChangeListener(UpdateView);
}
