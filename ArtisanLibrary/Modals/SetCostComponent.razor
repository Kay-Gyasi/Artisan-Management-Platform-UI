<EditForm Model="Command">
<!--begin::Input group-->
<div class="row mb-6">
	<!--begin::Label-->
	<label class="col-lg-4 col-form-label fw-bold fs-6">Cost</label>
	<!--end::Label-->
	<!--begin::Col-->
	<div class="col-lg-8 fv-row">
		<InputNumber @bind-Value="Command.Cost" name="cost" class="form-control form-control-lg form-control-solid" placeholder="Cost for order" />
	</div>
	<!--end::Col-->
</div>
<!--end::Input group-->

<div class="row mb-6">
	<!--begin::Notice-->
	<div class="notice d-flex bg-light-warning rounded border-warning border border-dashed p-6">
		<!--begin::Icon-->
		<!--begin::Svg Icon | path: icons/duotune/general/gen044.svg-->
		<span class="svg-icon svg-icon-2tx svg-icon-warning me-4">
			<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
				<rect opacity="0.3" x="2" y="2" width="20" height="20" rx="10" fill="black" />
				<rect x="11" y="14" width="7" height="2" rx="1" transform="rotate(-90 11 14)" fill="black" />
				<rect x="11" y="17" width="2" height="2" rx="1" transform="rotate(-90 11 17)" fill="black" />
			</svg>
		</span>
		<!--end::Svg Icon-->
		<!--end::Icon-->
		<!--begin::Wrapper-->
		<div class="d-flex flex-stack flex-grow-1">
			<!--begin::Content-->
			<div class="fw-bold">
				<h4 class="text-gray-900 fw-bolder">Take note!</h4>
				<div class="fs-6 text-gray-700">The cost cannot be changed after being set.</div>
				<div class="fs-6 text-gray-700">We rocommend to set it only when you are sure of the final cost.</div>
				<!--end::Content-->
			</div>
			<!--end::Wrapper-->
		</div>
		<!--end::Notice-->
	</div>
</div>
</EditForm>

<div class="card-footer">
	<!--begin::Action-->
	<a class="btn btn-primary align-self-center float-end" disabled="@IsLoading"
		@onclick="SetCost">Set</a>		
	<!--end::Action-->
</div>
@code {
	[Parameter]
	public string OrderId { get; set; }

	[Parameter]
	public OrderService OrderService { get; set; }

	[Parameter]
	public NavigationService Navigator { get; set; }

	[Parameter]
	public NotificationService ToastService { get; set; }

	bool IsLoading { get; set; }

	public SetCostCommand Command { get; set; } = new();

	async Task SetCost()
	{
		DisableButton(true);
		Command.OrderId = OrderId;
		var response = await OrderService.SetCost(Command);
		if (response.IsComplete)
		{
			Navigator.NavigateToScheduleDetailForceLoad(OrderId);
			return;
		}
		ToastService.ShowSetCostFailed();
		DisableButton(false);
	}

	void DisableButton(bool isLoading)
	{
		IsLoading = isLoading;
		StateHasChanged();
	}
}
