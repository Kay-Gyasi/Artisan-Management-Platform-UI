@page "/account/customer/settings"
@layout CustomerProfileLayout
@inject AuthService AuthStateService
@inject NotificationService ToastService
@inject UserService UserService
@inject IMapper Mapper
@implements IDisposable
@inject IActionDispatcher ActionDispatcher
@inject CustomerStore CustomerStore

<PageTitle>Settings</PageTitle>

@*<CustomerProfileLayout></CustomerProfileLayout>
*@<!--begin::Basic info-->
<div class="card mb-5 mb-xl-10">
	<!--begin::Card header-->
	<div class="card-header border-0 cursor-pointer" role="button" data-bs-toggle="collapse" 
	     data-bs-target="#kt_account_profile_details" aria-expanded="true" aria-controls="kt_account_profile_details"
	     tabindex="0" @ref="_csettBody">
		<!--begin::Card title-->
		<div class="card-title m-0">
			<h3 class="fw-bolder m-0">Personal Info</h3>
		</div>
		<!--end::Card title-->
	</div>
	<!--begin::Card header-->
	<!--begin::Content-->
	<div id="kt_account_profile_details" class="collapse show">
		<!--begin::Form-->
	<EditForm Model="User" id="kt_account_profile_details_form" class="form" OnValidSubmit="Submit">
	<DataAnnotationsValidator />
	<!--begin::Card body-->
	<div class="card-body border-top p-9">
		<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label required fw-bold fs-6">Full Name</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8">
			<!--begin::Row-->
			<div class="row">
				<!--begin::Col-->
				<div class="col-lg-6 fv-row">
					<InputText @bind-Value="User.FirstName" name="fname" class="form-control form-control-lg form-control-solid mb-3 mb-lg-0" placeholder="First name" />
				</div>
				<!--end::Col-->
				<!--begin::Col-->
				<div class="col-lg-6 fv-row">
					<InputText @bind-Value="User.FamilyName" name="lname" class="form-control form-control-lg form-control-solid" placeholder="Last name" />
				</div>
				<!--end::Col-->
			</div>
			<!--end::Row-->
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->
	<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label fw-bold fs-6">Other Name</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<InputText @bind-Value="User.OtherName" name="otherName" class="form-control form-control-lg form-control-solid" placeholder="Other name" />
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->

	<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label required fw-bold fs-6">Momo Number</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<InputText type="tel" @bind-Value="User.MomoNumber" name="momo" class="form-control form-control-lg form-control-solid" placeholder="Momo number" />
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->
	@*<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label fw-bold fs-6">
			<span class="required">Contact Phone</span>
			<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Phone number must be active"></i>
		</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<InputText type="tel" @bind-Value="User.Contact.PrimaryContact" name="phone" class="form-control form-control-lg form-control-solid" placeholder="Phone number" />
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->*@
	<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label fw-bold fs-6">Email Address</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<InputText type="email" @bind-Value="User.Contact.EmailAddress" name="email" class="form-control form-control-lg form-control-solid" placeholder="Email address" />
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->

	<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label fw-bold fs-6">Street Address</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<InputText @bind-Value="User.Address.StreetAddress" name="street" class="form-control form-control-lg form-control-solid" placeholder="Street address" />
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->

	<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label fw-bold fs-6">Level Of Education</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<InputSelect @bind-Value="User.LevelOfEducation" name="levelOfEducation" aria-label="Select a level" data-control="select2" data-placeholder="Select a level.." class="form-select form-select-solid form-select-lg">
				<option value="" selected>Select a level..</option>
				@foreach (var level in Enum.GetValues<LevelOfEducation>())
				{
					<option value="@level">
						@level.ToString()</option>
				}
			</InputSelect>
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->

	<!--begin::Input group-->
	<div class="row mb-6">
	<!--begin::Label-->
	<label class="col-lg-4 col-form-label fw-bold fs-6">
		<span class="required">Country</span>
		<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Country of origination"></i>
	</label>
	<!--end::Label-->
	<!--begin::Col-->
	<div class="col-lg-8 fv-row">
	<InputSelect @bind-Value="User.Address.Country" name="country" aria-label="Select a Country" data-control="select2" data-placeholder="Select a country..." class="form-select form-select-solid form-select-lg fw-bold">
		<option value="">Select a Country...</option>
		@foreach (var country in Enum.GetValues(typeof(Countries)))
		{
			<option value="@country">@country</option>
		}
	</InputSelect>
	</div>
	<!--end::Col-->
	</div>
	<!--end::Input group-->
	<!--begin::Input group-->
	<div class="row mb-6">
		<!--begin::Label-->
		<label class="col-lg-4 col-form-label required fw-bold fs-6">Language</label>
		<!--end::Label-->
		<!--begin::Col-->
		<div class="col-lg-8 fv-row">
			<!--begin::Input-->
			<select @onchange="SelectedLanguagesChanged" multiple name="language" aria-label="Select a Language" data-control="select2" data-placeholder="Select a language..." class="form-select form-select-solid form-select-lg">
				<option value="">Select a Language...</option>
				@foreach (var language in Enum.GetValues(typeof(Languages)))
				{
					<option value="@language.ToString()">@language</option>
				}
			</select>
			<!--end::Input-->
			<!--begin::Hint-->
			<div class="form-text">Please select preferred language(s)</div>
			<!--end::Hint-->
		</div>
		<!--end::Col-->
	</div>
	<!--end::Input group-->
	
	<p>
		Selected Languages: @string.Join(", ", Langs)
	</p>

	</div>
	<!--end::Card body-->
	<!--begin::Actions-->
	<div class="card-footer d-flex justify-content-end py-6 px-9">
@*		<button type="reset" class="btn btn-light btn-active-light-primary me-2">Discard</button>
*@		<button type="submit" class="btn btn-primary" id="kt_account_profile_details_submit"
				disabled="@IsLoading">Save Changes</button>
	</div>
	<!--end::Actions-->
	</EditForm>
		<!--end::Form-->
	</div>
	<!--end::Content-->
</div>
<!--end::Basic info-->






<!--begin::Deactivate Account-->
<div class="card">
	<!--begin::Card header-->
	<div class="card-header border-0 cursor-pointer" role="button" data-bs-toggle="collapse" data-bs-target="#kt_account_deactivate" aria-expanded="true" aria-controls="kt_account_deactivate">
		<div class="card-title m-0">
			<h3 class="fw-bolder m-0">Deactivate Account</h3>
		</div>
	</div>
	<!--end::Card header-->
	<!--begin::Content-->
	<div id="kt_account_deactivate" class="collapse show">
		<!--begin::Form-->
		<form id="kt_account_deactivate_form" class="form">
			<!--begin::Card body-->
			<div class="card-body border-top p-9">
				<!--begin::Notice-->
				<div class="notice d-flex bg-light-warning rounded border-warning border border-dashed mb-9 p-6">
					<!--begin::Icon-->
					<!--begin::Svg Icon | path: icons/duotune/general/gen044.svg-->
					<span class="svg-icon svg-icon-2tx svg-icon-warning me-4">
						<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">
							<rect opacity="0.3" x="2" y="2" width="20" height="20" rx="10" fill="black" />
							<rect x="11" y="14" width="7" height="2" rx="1" transform="rotate(-90 11 14)" fill="black" />
							<rect x="11" y="17" width="2" height="2" rx="1" transform="rotate(-90 11 17)" fill="black" />
						</svg>
					</span>
					<!--end::Svg Icon-->
					<!--end::Icon-->
					<!--begin::Wrapper-->
					<div class="d-flex flex-stack flex-grow-1">
						<!--begin::Content-->
						<div class="fw-bold">
							<h4 class="text-gray-900 fw-bolder">You Are Deactivating Your Account</h4>
							<div class="fs-6 text-gray-700">For extra security, this requires you to confirm your email or phone number when you reset yousignr password.
							<br />
							<a class="fw-bolder" href="#">Learn more</a></div>
						</div>
						<!--end::Content-->
					</div>
					<!--end::Wrapper-->
				</div>
				<!--end::Notice-->
				<!--begin::Form input row-->
				<div class="form-check form-check-solid fv-row">
					<input name="deactivate" class="form-check-input" type="checkbox" value="" id="deactivate" />
					<label class="form-check-label fw-bold ps-2 fs-6" for="deactivate">I confirm my account deactivation</label>
				</div>
				<!--end::Form input row-->
			</div>
			<!--end::Card body-->
			<!--begin::Card footer-->
			<div class="card-footer d-flex justify-content-end py-6 px-9">
				<button id="kt_account_deactivate_account_submit" type="submit" class="btn btn-danger fw-bold">Deactivate Account</button>
			</div>
			<!--end::Card footer-->
		</form>
		<!--end::Form-->
	</div>
	<!--end::Content-->
</div>
<!--end::Deactivate Account-->

@code {
	ElementReference _csettBody;
	CustomerCommand? Customer { get; set; } = new();
	UserCommand? User { get; set; } = new();
	string EmailAddress { get; set; }
	string UserName { get; set; }
	string StreetAddress { get; set; }
	string Phone { get; set; }
	string Country { get; set; }
	string[] UserLanguages { get; set; }
	string ImageUrl { get; set; }
	List<string> Langs { get; set; } = new List<string>();
	bool IsLoading { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		InitializeProperties();
		CustomerStore.AddStateChangeListener(UpdateView);
		await _csettBody.FocusAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await GetCustomer();
			var customer = CustomerStore.GetState().Customer;
			Customer = Mapper.Map<CustomerCommand>(customer);
			User = Mapper.Map<UserCommand>(customer.User);

			if (User?.Languages is not null)
			{
				foreach (var lang in User.Languages)
				{
					Langs.Add(lang.Name);
				}
			}

			InitializeProperties();
			User.Address ??= new Address();
			UpdateView();
		}
	}

	void InitializeProperties()
	{
		User.Contact ??= new Contact();
		User.Address ??= new Address();
		EmailAddress = User?.Contact?.EmailAddress ?? "";
		ImageUrl = User?.Image?.ImageUrl ?? "";
		UserName = User?.DisplayName;
		StreetAddress = User?.Address?.StreetAddress ?? "";
		Country = User?.Address?.Country.ToString() ?? "";
		Phone = User?.Contact?.PrimaryContact ?? "";
	}

	void SelectedLanguagesChanged(ChangeEventArgs e)
	{
		if (e.Value is not null)
		{
			UserLanguages = (string[])e.Value;
			Langs.Clear();
			foreach (var lang in UserLanguages)
			{
				Langs.Add(lang);
			}
		}
	}

	async Task Submit()
	{
		IsLoading = true;
		StateHasChanged();
		User.Type = UserType.Customer;
		var langs = from c in Langs
					select new LanguagesCommand()
			{
				Name = c
			};
		User?.Languages.Clear();
		User?.Languages.AddRange(langs);
		var response = await UserService.Update(User);
		IsLoading = false;
		StateHasChanged();
		if (response.IsComplete)
		{
			await ResetCustomer();
			ToastService.SaveSuccess();
			await GetCustomer();
			var customer = CustomerStore.GetState().Customer;
			Customer = Mapper.Map<CustomerCommand>(customer);
			User = Mapper.Map<UserCommand>(customer.User);
			UpdateView();
			return;
		}
		ToastService.SaveFailure();
	}

	private async Task GetCustomer()
	{
		await ActionDispatcher.Dispatch(new GetCustomerByUserIdAction());
	}

	private async Task ResetCustomer()
	{
		await ActionDispatcher.Dispatch(new ResetCustomerAction());
	}

	private void UpdateView()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		CustomerStore.RemoveStateChangeListener(UpdateView);
	}
}


