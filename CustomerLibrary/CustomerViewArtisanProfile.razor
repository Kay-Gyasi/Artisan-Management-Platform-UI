@page "/customers/view-artisan/{ArtisanId}/{OrderId}"
@inject NavigationService Navigator
@inject ArtisanService ArtisanService
@inject AuthService AuthStateService
@inject OrderStore OrderStore
@implements IDisposable

<PageTitle>Artisan Profile View</PageTitle>

<CustomerViewArtisanLayout @ref="_artisanLayout" Artisan="Artisan" OrderId="@OrderId" ArtisanId="@ArtisanId"></CustomerViewArtisanLayout>

<!--begin::details View-->
<div class="card mb-5 mb-xl-10" id="kt_profile_details_view">
	<!--begin::Card header-->
	<div class="card-header cursor-pointer">
		<!--begin::Card title-->
		<div class="card-title m-0">
			<h3 class="fw-bolder m-0">Profile Details</h3>
		</div>
		<!--end::Card title-->
		
	</div>
	<!--begin::Card header-->
	<!--begin::Card body-->
	<div class="card-body p-9">
		<!--begin::Row-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Full Name</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800">@Artisan?.User?.DisplayName</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Row-->
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Company</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@Artisan?.BusinessName</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Input group-->
        		<div class="row mb-7">
        			<!--begin::Label-->
        			<label class="col-lg-4 fw-bold text-muted">Type of Business</label>
        			<!--end::Label-->
        			<!--begin::Col-->
        			<div class="col-lg-8 fv-row">
        				<span class="fw-bold text-gray-800 fs-6">@Artisan.Type.ToString()</span>
        			</div>
        			<!--end::Col-->
        		</div>
		<!--end::Input group-->
		
		@if (Artisan.Services.Any(x => x.Name == "Electrical Works"))
		{
			<!--begin::Input group-->
			<div class="row mb-7">
				<!--begin::Label-->
				<label class="col-lg-4 fw-bold text-muted">Is certified?</label>
				<!--end::Label-->
				<!--begin::Col-->
				<div class="col-lg-8 fv-row">
					<span class="fw-bold text-gray-800 fs-6">@IsCertified()</span>
				</div>
				<!--end::Col-->
			</div>
			<!--end::Input group-->
		}
		
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Contact Phone
			<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Phone number must be active"></i></label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 d-flex align-items-center">
				<span class="fw-bolder fs-6 text-gray-800 me-2"><a href="tel:@Artisan?.User?.Contact?.PrimaryContact">
					@Artisan?.User?.Contact?.PrimaryContact
				</a></span>
				<span class="badge badge-success" disabled="@Artisan?.IsVerified">Verified</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Country
			<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Country of origination"></i></label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800">Ghana</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Email</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800">@Artisan?.User?.Contact?.EmailAddress</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->

	</div>
	<!--end::Card body-->
</div>
<!--end::details View-->

@code {
	CustomerViewArtisanLayout _artisanLayout;
	[Parameter]
	public string ArtisanId { get; set; }
	[Parameter]
	public string OrderId { get; set; }
	ArtisanDto Artisan { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		InitializeProperties();
		OrderStore.AddStateChangeListener(UpdateView);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Artisan = await ArtisanService.GetAsync(ArtisanId);
			StateHasChanged();
		}
	}

	void InitializeProperties()
	{
		Artisan.User = new();
		Artisan.User.Address = new();
		Artisan.User.Contact = new();
	}

	private void UpdateView()
	{
		StateHasChanged();
	}

	public void Dispose()
	{
		OrderStore.RemoveStateChangeListener(UpdateView);
	}

	string IsCertified() => !string.IsNullOrEmpty(Artisan.ECCN) ? "Yes" : "No";
}
