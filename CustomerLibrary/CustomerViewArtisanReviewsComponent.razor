@page "/customers/view-artisan/reviews/{ArtisanId}/{OrderId}"
@inject ArtisanService ArtisanService
@inject AuthService AuthStateService
@inject RatingService RatingService

<PageTitle>Artisan Reviews</PageTitle>

<CustomerViewArtisanLayout @ref="_artisanLayout" Artisan="Artisan" OrderId="@OrderId" ArtisanId="@ArtisanId"></CustomerViewArtisanLayout>

<!--begin::Container-->

	<!--begin::Row-->
<div class="row g-5 g-xl-8">
	@if (Ratings.Data.Count < 1 || Ratings.Data == null)
    {
    	<div class="col-12 justify-content-center text-center">
    		<h3>No reviews received</h3>
    	</div>
    }
	else
	{
		@foreach (var review in Ratings.Data)
		{
			<div class="col-xl-4" style="cursor:pointer">
				<!--begin::Statistics Widget 1-->
				<div class="card bgi-no-repeat card-xl-stretch mb-xl-8" style="background-position: right top; background-size: 30% auto; background-image: url(abstract-4.svg)">
					<!--begin::Body-->
					<div class="card-body">
						<a class="card-title fw-bolder text-muted text-hover-primary fs-4">@review.Customer.User.DisplayName</a>
						<div class="fw-bolder text-primary my-6">@review.Description</div>
						<p class="text-dark-75 fw-bold fs-5 m-0">@review.Votes.ToString()/5</p>
					</div>
					<!--end::Body-->
				</div>
				<!--end::Statistics Widget 1-->
			</div>
		}
	}
</div>
	<!--end::Row-->

<!--end::Container-->


@code {
	CustomerViewArtisanLayout _artisanLayout;
	[Parameter]
	public string ArtisanId { get; set; }
	[Parameter]
	public string OrderId { get; set; }
	ArtisanDto Artisan { get; set; } = new();

	PaginatedList<RatingPageDto> Ratings { get; set; } = new();
	PaginatedQuery Query { get; set; } = PaginatedQuery.Build(0, 1, 20);

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		Artisan = await ArtisanService.GetAsync(ArtisanId);
		Ratings.Data = new();
		Query.OtherJson = ArtisanId;
		Ratings = await RatingService.GetArtisanRatingPage(Query);
	}
}
