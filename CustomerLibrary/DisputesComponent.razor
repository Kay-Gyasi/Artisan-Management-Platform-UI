@page "/customer/disputes"
@inject DisputeService DisputeService
@inject AuthService AuthStateService
@inject NavigationService Navigator

<PageTitle>Disputes</PageTitle>

<!--begin::Form-->
<EditForm Model="SearchObj" OnSubmit="Submit">
	<!--begin::Card-->
	<div class="card mb-7">
		<!--begin::Card body-->
		<div class="card-body">
			<!--begin::Compact form-->
			<div class="d-flex align-items-center">
				<!--begin:Action-->
                <div class="d-flex align-items-center">
                	<button type="button" class="btn btn-primary" @onclick="Navigator.NavigateToAddDispute">Add Dispute</button>
                </div>
                <!--end:Action-->
			</div>
		</div>
		<!--end::Card body-->
	</div>
	<!--end::Card-->
</EditForm>
<!--end::Form-->

<!--begin::Container-->
	<!--begin::Row-->
<div class="row g-5 g-xl-8">
	@if (Disputes.Data.Count < 1 || Disputes.Data == null)
    {
    	<div class="col-12 justify-content-center text-center">
    		<h3>You have no open disputes</h3>
    	</div>
    }
	else
	{
		@foreach (var dispute in Disputes.Data)
		{
			<div class="col-xl-4" style="cursor:pointer" @onclick="(() => Navigator.NavigateToEditDispute(dispute.Id))">
				<!--begin::Statistics Widget 1-->
				<div class="card bgi-no-repeat card-xl-stretch mb-xl-8" style="background-position: right top; background-size: 30% auto; background-image: url(abstract-4.svg)">
					<!--begin::Body-->
					<div class="card-body">
						<a @onclick="(() => Navigator.NavigateToEditDispute(dispute.Id))" class="card-title fw-bolder text-muted text-hover-primary fs-4">Order Reference No.: @dispute.Order.ReferenceNo</a>
						@*					<div class="fw-bolder text-primary my-6">Transaction Reference: @payment.TransactionReference</div>
	
						<p class="text-dark-75 fw-bold fs-5 m-0">Amount: @dispute.AmountPaid</p>*@
					</div>
					<!--end::Body-->
				</div>
				<!--end::Statistics Widget 1-->
			</div>
		}
	}
</div>
	<!--end::Row-->

<!--end::Container-->

@code {
	Search SearchObj { get; set; } = new();
	bool IsLoading { get; set; }
	PaginatedList<DisputePageDto> Disputes { get; set; } = new();
	PaginatedQuery Query { get; set; } = PaginatedQuery.Build(0, 1, 20);

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		Disputes.Data = new();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Disputes = await DisputeService.GetPage(Query);
			StateHasChanged();
		}
	}

	async Task Submit()
	{
		DisableButton(true);
		Query.ThenSearch(SearchObj.SearchTerm);
		Disputes = await DisputeService.GetPage(Query);
		DisableButton(false);
	}

	void DisableButton(bool isLoading)
	{
		IsLoading = isLoading;
		StateHasChanged();
	}
}
