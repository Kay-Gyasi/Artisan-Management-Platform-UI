@page "/customer/reviews"
@inject AuthService AuthStateService
@inject RatingService RatingService
@inject NavigationService Navigator

<PageTitle>Ratings</PageTitle>

<!--begin:Action-->
<div class="d-flex align-items-center mb-2">
	<button type="button" class="btn btn-primary" @onclick="Navigator.NavigateToAddReview">New review</button>
</div>
<!--end:Action-->

<!--begin::Container-->
	<!--begin::Row-->
<div class="row g-5 g-xl-8">
	@if (Ratings.Data.Count < 1 || Ratings.Data == null)
    {
        <div class="col-12 justify-content-center text-center">
        	<h3>You have not made any reviews</h3>
        </div>
    }
	else
	{
		@foreach (var review in Ratings.Data)
		{
			<div class="col-xl-4" style="cursor:pointer" @onclick="() => Navigator.NavigateToEditReview(review.Id)">
				<!--begin::Statistics Widget 1-->
				<div class="card bgi-no-repeat card-xl-stretch mb-xl-8" style="background-position: right top; background-size: 30% auto; background-image: url(assets/media/abstract-4.svg)">
					<!--begin::Body-->
					<div class="card-body">
						<a @onclick="() => Navigator.NavigateToEditReview(review.Id)"
						   class="card-title fw-bolder text-muted text-hover-primary fs-4">@review.Artisan.BusinessName</a>
						<div class="fw-bolder text-primary my-6">@review.Description</div>
						<p class="text-dark-75 fw-bold fs-5 m-0">@review.Votes.ToString()/5</p>
					</div>
					<!--end::Body-->
				</div>
				<!--end::Statistics Widget 1-->
			</div>
		}
	}
</div>
	<!--end::Row-->

<!--end::Container-->
@code {
	PaginatedList<RatingPageDto> Ratings { get; set; } = new();
	PaginatedQuery Query { get; set; } = PaginatedQuery.Build(0, 1, 20);

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		Ratings.Data = new();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Ratings = await RatingService.GetCustomerPage(Query);
			StateHasChanged();
		}
	}

}
