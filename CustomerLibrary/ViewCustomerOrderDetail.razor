@page "/customers/orders/{OrderId}"
@using Microsoft.Extensions.Configuration
@using System.Globalization
@inject OrderService OrderService
@inject NavigationService Navigator
@inject NotificationService ToastService
@inject AuthService AuthStateService
@inject IPaymentService PaymentService
@inject IConfiguration Configuration

<PageTitle>Order Details</PageTitle>

<!--begin::details View-->
<div class="card mb-5 mb-xl-10" id="kt_profile_details_view">
	<!--begin::Card header-->
	<div class="card-header cursor-pointer">
		<!--begin::Card title-->
		<div class="card-title m-0">
			<h3 class="fw-bolder m-0">Order Details</h3>
		</div>
		<!--end::Card title-->
		@if (!IsCompleted())
		{
			@if (!IsArtisanAssigned)
			{
				<!--begin::Action-->
				<a @onclick="@(() => Navigator.NavigateToAssignOrderToArtisan(Order?.Id, Order?.Service.Name))" 
				   class="btn btn-primary align-self-center" disabled="@IsLoading">Assign to artisan</a>
				<!--end::Action-->
			}
			else
			{
				<!--begin::Action-->
				<a @onclick="RemoveAssignedArtisan" class="btn btn-danger align-self-center"
				   disabled="@IsLoading">Remove assigned artisan</a>
				<!--end::Action-->
			}
		}
	</div>
	<!--begin::Card header-->
	<!--begin::Card body-->
	<div class="card-body p-9">
		<!--begin::Row-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Customer Name</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bolder fs-6 text-gray-800">@Order?.Customer.User.DisplayName</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Row-->
		@if (IsArtisanAssigned)
		{
			<!--begin::Row-->
			<div class="row mb-7" style="cursor: pointer;">
				<!--begin::Label-->
				<label class="col-lg-4 fw-bold text-muted">Assigned Artisan</label>
				<!--end::Label-->

				<!--begin::Col-->
				<div class="col-lg-8">
					<span class="fw-bolder fs-6 text-gray-800" 
						  @onclick=@(() => Navigator.NavigateToCustomerViewArtisanProfile(Order?.Artisan.Id))
						>@Order?.Artisan.BusinessName</span>
				</div>
				<!--end::Col-->

			</div>
			<!--end::Row-->
		}
		

		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Description</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@Order?.Description</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->


		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Cost</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@CostView()</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->


		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Payment Made</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@PaymentMade()</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Preferred Start Date</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@Order?.PreferredStartDate.ToShortDateString()</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->

		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Preferred Completion Date</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@Order?.PreferredCompletionDate.ToShortDateString()</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->

		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Service</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 fv-row">
				<span class="fw-bold text-gray-800 fs-6">@Order?.Service.Name</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->

		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Contact Phone
			<i class="fas fa-exclamation-circle ms-1 fs-7" data-bs-toggle="tooltip" title="Phone number must be active"></i></label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8 d-flex align-items-center">
				<a href="tel:@Order?.Customer.User.Contact?.PrimaryContact" class="fw-bolder fs-6 text-gray-800 me-2">
					@Order?.Customer.User.Contact?.PrimaryContact
				</a>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->

		<!--begin::Input group-->
		<div class="row mb-7">
			<!--begin::Label-->
			<label class="col-lg-4 fw-bold text-muted">Work Address</label>
			<!--end::Label-->
			<!--begin::Col-->
			<div class="col-lg-8">
				<span class="fw-bold fs-6 text-gray-800 text-hover-primary">@Order?.WorkAddress.Town, @Order?.WorkAddress.StreetAddress</span>
			</div>
			<!--end::Col-->
		</div>
		<!--end::Input group-->
		
		<div class="card-footer">
			@if (!IsCompleted())
			{
				if(Order is {IsRequestAccepted: false }){
					<a class="btn btn-danger align-self-center float-end ms-1" disabled="@IsLoading"
				   @onclick="Delete">Cancel</a>
				}
			
				@if(IsArtisanAssigned)
				{
					<div class="btn-group float-end" disabled="@IsLoading">
					
						@if(Order is {Cost: > 0,PaymentMade: > 0} && Order?.Cost <= Order?.PaymentMade)
						{
							<input type="button" class="btn btn-primary" @onclick="Complete" value="Complete" disabled="@IsLoading"/>
							@*<button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
								<span class="visually-hidden">Toggle Dropdown</span>
							</button>
							<ul class="dropdown-menu">
								<li><a class="dropdown-item" @onclick="Complete">Forward Payment To Artisan</a></li>
							</ul>*@
						}
						else
						{
							<input type="button" class="btn btn-primary" @onclick="InitiatePayment" value="Make Payment" disabled="@IsLoading"/>
							@*<button type="button" class="btn btn-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
								<span class="visually-hidden">Toggle Dropdown</span>
							</button>*@
						}
					</div>
				}			
				<!--end::Actions-->
			}
		</div>
	</div>
	<!--end::Card body-->
</div>
<!--end::details View-->
@code {

	// TODO:: Create feature for setting cost of order and test payment

	[CascadingParameter]
	IModalService Modal { get; set; }
	[Parameter]
	public string OrderId { get; set; }
	bool IsLoading { get; set; }
	bool IsArtisanAssigned { get; set; }

	OrderDto? Order { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await AuthStateService.CheckAuthStatus();
		await InitializeProperties();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Order = await OrderService.GetAsync(OrderId);
			if(Order != null) Order.Artisan ??= new ArtisanDto();
			IsArtisanAssigned = !string.IsNullOrEmpty(Order?.Artisan.Id);
			StateHasChanged();
		}
	}

	Task InitializeProperties()
	{
		Order.Customer = new();
		Order.Artisan = new();
		Order.Customer.User = new();
		Order.Customer.User.Address = new();
		Order.Customer.User.Contact = new();
		Order.WorkAddress = new();
		return Task.CompletedTask;
	}

	async Task InitiatePayment()
	{
		if(Order?.Cost <= 0)
		{
			ToastService.CostNotSet();
			return;
		}
		
		if((Order?.Cost - Order?.PaymentMade) <= 0)
		{
			ToastService.ShowInvalidAmountSent();
			return;
		}

		if (Order is null) return;
		var payment = new PaymentCommand
		{
			OrderId = Order.Id,
			AmountPaid = Order.Cost - Order.PaymentMade
		};

		var email = await AuthStateService.GetClaim("email");
		if (string.IsNullOrEmpty(email)) email = Configuration["DefaultEmail"];
		var approvalSite = await PaymentService.InitializeTransaction(payment, email);
		if (approvalSite == PaymentsService.InvalidAmount)
		{
			ToastService.ShowInvalidAmountSent();
			return;
		}
		Navigator.NavigateToPaymentAuthorizationUrl(approvalSite);
	}

	void RemoveAssignedArtisan()
	{
		var parameters = new ModalParameters();
		parameters.Add(nameof(UnassignArtisanComponent.OrderId), OrderId);

		Modal.Show<UnassignArtisanComponent>("Unassign Artisan", parameters);
	}

	async Task Complete()
	{
		DisableButton(true);

		if (Order is {IsArtisanComplete: false })
		{
			ToastService.ShowArtisanNotComplete();
			DisableButton(false);
			return;
		}
		var response = await OrderService.Complete(OrderId);
		if (response.IsComplete)
		{

			// Forward payment to artisan in background
			Navigator.NavigateToCustomerOrderList();
			return;
		}
		ToastService.ShowOrderCompleteFailed();
		DisableButton(false);
	}

	async Task Delete()
	{
		DisableButton(true);
		var response = await OrderService.SoftDelete(OrderId);
		if (response.IsComplete)
		{
			Navigator.NavigateToCustomerOrderListForceLoad();
			return;
		}
		ToastService.DeleteFailed();
		DisableButton(false);
	}

	bool IsCompleted() => Order?.Status == OrderStatus.Completed;

	void DisableButton(bool isLoading)
	{
		IsLoading = isLoading;
		StateHasChanged();
	}

	string CostView() => Order?.Cost <= 0 ? "Not Set" : Order?.Cost.ToString(CultureInfo.InvariantCulture);

	string PaymentMade() 
		=> Order?.PaymentMade <= 0 ? "No payment made" : Order?.PaymentMade.ToString(CultureInfo.InvariantCulture);
}
